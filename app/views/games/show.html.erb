<p><%= link_to 'Back', games_path %></p>

<audio controls loop>
  <source src="/elevator.mp3" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>

<p>
  <strong>Playing in room: <%= @game.room_name %></strong>
</p>

<div id="status">

<div class="main-display text-center">
  <% if @user.is_game_host? %>
    <div class="btn btn-lg btn-success start-game-btn">Start Game!</div>
  <% end %>
  <%= link_to 'Leave Game!', game_leave_path(@game), class: 'btn btn-lg btn-primary leave-game-btn"' %>
</div>


<!-- game window -->
<div id="game-window" style="height: 550px;">

  <div id="players"></div>

  <div id="deck-discard">
    <div id="deck" class="card-container"><%=image_tag("deck.jpg")%></div>
    <div id="discard" class="card-container">Discard</div>
  </div>

  <div id="hand"></div>
</div>


<!-- chat box -->
<div id="chat-wrapper">
  <div id="menu">
    <p class="welcome"><%= @game.room_name %> Chat <b></b></p>
    <p class="logout"><a id="exit" href="#">Exit Chat</a></p>
    <div style="clear:both"></div>
  </div>

  <!-- chat text -->
  <div id = "chat">
  	<div id="chatbox"></div>
  </div>

  <form id="txtbox">
  	<!-- send -->
  	<input name="submitmsg" type="submit" id="submitmsg" value="Send" style="float:right"/>

	   <!-- user input -->
  	<div style="overflow: hidden; padding-right: .5em">
      <input id="usermsg" type="text" autocomplete="off"
             placeholder="Send a message..." maxlength="4000" style="width:100%"
       />
    </div>
  </div>
</div>

<% content_for :javascript do %>
  <%= javascript_include_tag 'chat' %>
<script>
  var cards = {};
  cards['attack'] = <%= raw @attack_cards %>;
  cards['Beard Cat'] = <%= raw @beard_cat %>;
  cards['Hairy Potato Cat'] = <%= raw @hairy_potato_cat %>;
  cards['Rainbow Puking Cat'] = <%= raw @rainbow_puking_cat %>;
  cards['Taco Cat'] = <%= raw @taco_cat %>;
  cards['Watermelon Cat'] = <%= raw @watermelon_cat %>;
  cards['defuse'] = <%= raw @defuse_cards %>;
  cards['exploding_kitten'] = <%= raw @exploding_kitten_cards %>;
  cards['favor'] = <%= raw @favor_cards %>;
  cards['see_the_future'] = <%= raw @see_the_future_cards %>;
  cards['nope'] = <%= raw @nope_cards %>;
  cards['shuffle'] = <%= raw @shuffle_cards %>;
  cards['skip'] = <%= raw @skip_cards %>;

  $(function() {
    // for authenticating AJAX requests
    var headers = {};
    headers['X-CSRF-Token'] = AUTH_TOKEN;

    // Enable pusher logging - don't include this in production
    Pusher.log = function(message) {
      if (window.console && window.console.log) {
        window.console.log(message);
      }
    };

    var gameChannel = pusher.subscribe('<%= @main_channel %>');
    var userChannel = pusher.subscribe('<%= @user_channel %>');

     // listen for pusher events for the whole game
     gameChannel.bind('announcement', function(data) {
       printToChat(data.message, { isGameMessage: true});
     });

    gameChannel.bind('game.player.joined', function(data) {
      printToChat('User '+ data.username + ' joined the game!', {
        isGameMessage: true
      });
      $('.player').data('player_id', data.id);
      $('.player').data('player_username', data.username);
    });

    gameChannel.bind('game.player.left', function(data) {
      printToChat('User '+ data.username + ' left the game. :(', {
        isGameMessage: true
      });
      document.getElementById($('.player').data('player_id')).remove();
    });

    gameChannel.bind('game.start', function(data) {
      printToChat('The game has started.', { isGameMessage: true });
      console.log(data);

      playerArray = data.players;
      var p1 = data.players[0].username;

      // alert($('.player').data('player_id'));
      spawnPlayer(data);
    });

    // pusher events for the player
    userChannel.bind('announcement', function(data) {
      printToChat(data.message, { isGameMessage: true});
    });

    userChannel.bind('player.errors', function(data) {
      printToChat(data.error, {
        isGameMessage: true,
        isError: true
      });
    });

    userChannel.bind('player.turn.start', function() {
      printToChat("It's your turn!", { isGameMessage: true });
    });

    userChannel.bind('player.turn.end', function() {
      printToChat('You ended your turn.', { isGameMessage: true });
    });

    userChannel.bind('player.hand.updated', function(data) {
      if (data.action === 'add') {
        spawnCard(data.card);
      } else if (data.action === 'remove') {
        discardCard(data.card_id);
      }
    });

    userChannel.bind('player.chat', function(data) {
      var msg = data.username + ': ' + data.message;
      printToChat(msg, { isUserMessage: true });
    });

    userChannel.bind('player.deck.see_the_future', function(data) {
      alert('You saw the future! Look in the console to view the cards.');
      console.log(data.cards);
    })


    // DOM events
    <% if @user.is_game_host? %>
      $('.start-game-btn').click(function() {
        $.ajax({
          method: 'POST',
          url: '<%= game_start_path(@game) %>',
          headers: headers
        });
      });
    <% end %>

    $('#game-window').on('click', '.player', function() {
      //alert(this.id);
      sendPlayCardRequest.apply($.playingCardId, this.id);
    });

    $('#deck').click(function() {
      $.ajax({
        url: '<%= game_draw_path(@game) %>',
        headers: headers
      });
    });

    $('#discard').droppable({
      accept: '.draggable-card',
      hoverClass: 'hovered',
      drop: handleDropEvent
    });

    $('.draggable-card').draggable({
      cursor: 'move',
      snap: '#discard',
      containment: '#game-window',
      stack: '.draggable-card'
    });

    $('#game-window').on('click', '.card', function() {
      $(this).animate({
        height: ($(this).height() == 300) ? 150 : 300,
        width: ($(this).width() == 180) ? 90 : 180
      }, 200);

      var container = $(this).parent('.card-container');
      container.toggleClass('focused');
      displayActionDialog(container);
    });

    // send chat

    $('#txtbox').submit(function(e) {
      e.preventDefault();

      var message = $('#usermsg').val();

    	if (message !== '') {
    		$.ajax({
          url: '<%= game_send_chat_path(@game) %>',
          method: 'POST',
          data: { message: message },
          headers: headers,
        });

    		$('input#usermsg').val("");
    	}
    });

    $('#game-window').on('click', '.action-dialog .action.play', function() {
      // determine if the user needs to select a target to play this card
      // if so, send the card and the target to the server
      // otherwise just send the card being played

      // right now im not checking if a target is required, this is just
      // a proof of concept!
      
      var id = $(this).parent().siblings('.card').data('card-id');
      
      if ($(card).hasClass(‘requires_target’)){
      	$.playingCardId = id;
      }	else {
		sendPlayCardRequest.apply(id);
      }


    });
    
    var sendPlayCardRequest = function(){
      $.ajax({
        headers: headers,
        url: '<%= game_play_card_path(@game) %>',
        data: { card_id: arguments[0],
        		target_player_id: arguments[1] },
        method: 'POST'
      });
    }

    $('#game-window').on('click', '.action-dialog .action.description', function() {
      alert($(this).parent().siblings('.card').data('description'));
    });

    // helper functions

    var printToChat = function(message, options) {
      var messageContainer = $('<div class="msg"></div>');
      var timestamp = $('<span class="timestamp">');

      if (options) {
        if (options.isGameMessage) messageContainer.addClass('game-msg');
        if (options.isError) messageContainer.addClass('err-msg');
        if (options.isUserMessage) messageContainer.addClass('user');
      }

      var date = new Date();
      var rawHours = date.getHours();
      var timeOfDay = rawHours >= 12 ? 'PM' : 'AM';
      var hours = rawHours !== 0 ? rawHours - 12 : '00'; // getHours returns military time
      var minutes = date.getMinutes();
      var seconds = date.getSeconds();

      timestamp.text(
        '[ ' + hours + ':' + minutes + ':' + seconds + ' ' + timeOfDay + ' ]'
      );

      messageContainer
        .text(message)
        .prepend(timestamp);

      $('#chatbox').append(messageContainer);
      $('#chat').animate({
           scrollTop: $('#chatbox').height()
      }, 'fast');
    };

    function handleDropEvent( event, ui ) {
      var draggable = ui.draggable;
      alert( 'Card "' + draggable.attr('id') + '" was discarded!' );
      draggable.remove();
    }

    var spawnCard = function(card) {
      var cardContainer = $('<div>').addClass('card-container');
      var img = $(_.sample(cards[card.card_name]));
      img
        .addClass('card draggable-card')
        .attr('id', card.card_name)
        .attr('data-card-id', card.id)
        .attr('data-description', card.description);

      img.draggable({
        cursor: 'move',
        snap: '#discard',
        containment: '#game-window',
        stack: '.draggable-card'
      });

      cardContainer.append(img);
      $('#hand').append(cardContainer);
    };

    var discardCard = function(id) {
      $('.card[data-card-id="' + id + '"]').parent('.card-container').remove();
    };

    var displayActionDialog = function(cardContainer) {
      if (cardContainer.hasClass('focused')) {
        var dialog = $('<div>').addClass('action-dialog');
        var description = $('<div>')
          .addClass('action description')
          .text('Description');
        var play = $('<div>').addClass('action play').text('Play');

        dialog.append(play).append(description);
        cardContainer.append(dialog);
      } else {
        cardContainer.find('.action-dialog').remove();
      }
    }

    function spawnPlayer(data) {
      var iconArray = ['/assets/playericon1.png','/assets/playericon2.png',
        '/assets/playericon3.png','/assets/playericon4.png','/assets/playericon7.png']

      for (i = 0; i < data.players.length; i++)
      {
        var img = document.createElement('img');
        img.src = iconArray[i];
        img.setAttribute("id", data.players[i].id);
        img.setAttribute("class", "player");
        document.getElementById('players').appendChild(img);
      }
    };
  });
</script>
<% end %>
